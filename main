import collections
import operator


class File:
    def read(self, filepath):
        with open(filepath) as file:
            content = file.read().splitlines()
            print(f'Finished reading from {filepath}')
            return content

    def write(self, filepath, data):
        with open(filepath, 'w') as file:
            file.write(data)


class Solution:
    def run(self, inputFile, outputFile):
        file = File()
        data = file.read(inputFile)
        totalphotos = int(data[0])
        photos = self.generatePhotos(data[1:])
        print('Total photos:', totalphotos)
        sequence = Sequence(photos)
        # file.write(outputFile, sequence)

    def generatePhotos(self, lines):
        photos = []

        for index, line in enumerate(lines):
            info = line.split()
            photos.append(Photo(index, info[0], info[1], info[2:]))

        return photos


class Photo:
    def __init__(self, id, orientation, totaltags, tags):
        self.id = id
        self.orientation = orientation
        self.totalTags = totaltags
        self.tags = tags
        self.connections = {}

    def get_tags(self):
        return self.tags

    def get_connections(self):
        return self.connections


class Sequence:
    s = []

    def __init__(self, photos):
        for i, photo in enumerate(photos):
            for index in range(i + 1, len(photos)):
                funIndex = self.get_fun_index(photo, photos[index])

                if funIndex != 0:
                    photo.connections[photos[index].id] = funIndex

            self.s.append(photo)
            maxPhotoId = max(photo.connections.items(), key=operator.itemgetter(1))[0]
            self.s.append(photos[maxPhotoId])

            del photos[i]
            del photos[index]

            print('max', maxPhotoId)

    print('Final array:', s)

    def get_fun_index(self, photo1, photo2):
        if self.has_common_tag(photo1, photo2):
            commonTags = list(set(photo1.tags).intersection(photo2.tags))
            unique1 = (list(set(photo1.tags) - set(photo2.tags)))
            unique2 = (list(set(photo2.tags) - set(photo1.tags)))
            return min(len(commonTags), len(unique1), len(unique2))
        else:
            print(f"Photo {photo1.id} and {photo2.id} have no common tags.")
            return 0

    def has_common_tag(self, photo1, photo2):
        tags1 = set(photo1.tags)
        tags2 = set(photo2.tags)
        if len(tags1.intersection(tags2)) > 0:
            return True
        return False


solution = Solution()
solution.run("input/a_example.txt", "output/a_results.txt")
# solution.createSequence("input/b_lovely_landscapes.txt", "output/b_small.txt")
# solution.createSequence("input/c_memorable_moments.txt", "output/c_medium.txt")
# solution.createSequence("input/d_pet_pictures.txt", "output/d_big.txt")
# solution.createSequence("input/e_shiny_selfies.txt", "output/e_huge.txt")

# s = Sequence()
# p1 = Photo(1, "H", 5, ["dog1", "cat", "pig", "cow", "chiken"])
# p2 = Photo(2, "H", 5, ["dog", "goose", "deer", "wolf", "fox"])
# res = s.has_common_tag(p1, p2)
#
# print(res)

# class Test:
#     inner = {}
#
#
# t = Test()
# t.inner['hello'] = "World!"
#
# print(t.inner)
